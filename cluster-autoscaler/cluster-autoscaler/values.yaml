replicaCount: 1
revisionHistoryLimit: 10

deployment:
  annotations: {}
  labels: {}

image:
  repository: "k8s.gcr.io/cluster-autoscaler"
  tag: "v1.21.0"
  pullPolicy: "IfNotPresent"

cloudProvider: "aws"
awsRegion: "us-east-1"
autoDiscovery:
  clusterName: "redhat-eks-cluster-dev"
  namespace: default
  tags:
    - k8s.io/cluster-autoscaler/enabled
    - k8s.io/cluster-autoscaler/redhat-eks-cluster-dev # Cluster name tag for autoscaler
  labels: []
  roles: []
autoscalingGroups:
  - name: redhat-eks-cluster-dev-nodes  # Replace with the actual name of your AWS ASG
    minSize: 1
    maxSize: 3
    instanceType: "t2.micro" # Change instance type if needed
    region: "us-east-1" # Region your ASG is in

priorityClassName: "high-priority"
dnsPolicy: "ClusterFirst"
hostNetwork: false

initContainers: []

podAnnotations: {}

podLabels: {}

updateStrategy:
  type: "RollingUpdate"
  rollingUpdate:
    maxSurge: 1
    maxUnavailable: 0

extraArgs: 
  - "v"
  - "4"

extraEnv: 
  CUSTOM_ENV: "value"

envFromSecret: ""
envFromConfigMap: ""

resources:
  limits:
    cpu: "100m"
    memory: "128Mi"
  requests:
    cpu: "50m"
    memory: "64Mi"

containerSecurityContext: {}

affinity: {}
nodeSelector: {}
tolerations: []
topologySpreadConstraints: []

securityContext: {}

extraVolumeSecrets: {}
extraVolumeMounts: []

cloudConfigPath: "/etc/cloudconfig"

# Add this to your values.yaml file
vpa:
  enabled: false  # Set to true if you want to enable Vertical Pod Autoscaler

# values.yaml

serviceMonitor:
  enabled: true
  additionalLabels:
    release: "cluster-autoscaler"

  # Define the service section with portName
  service:
    portName: "http"  # This should be the name of the port exposed by your cluster-autoscaler service

# Optional: Add custom monitoring rules if required
servicemonitor:
  rules:
    - alert: "HighPodCPUUsage"
      expr: sum(rate(container_cpu_usage_seconds_total{job="cluster-autoscaler", cluster="", namespace="kube-system", container!="", pod=~"cluster-autoscaler.*"}[5m])) by (pod)
      for: 5m
      labels:
        severity: "critical"
      annotations:
        description: "CPU usage is above 80% for 5 minutes."
    - alert: "HighPodMemoryUsage"
      expr: sum(container_memory_usage_bytes{job="cluster-autoscaler", cluster="", namespace="kube-system", container!="", pod=~"cluster-autoscaler.*"}) by (pod) > 80e6  # 80MiB
      for: 5m
      labels:
        severity: "critical"
      annotations:
        description: "Memory usage is above 80MiB for 5 minutes."

service:
  create: true
  annotations: {}
  labels: {}
  externalIPs: []
  clusterIP: ""
  loadBalancerIP: ""
  loadBalancerSourceRanges: []
  servicePort: 8085
  portName: http
  type: ClusterIP

rbac:
  create: true
  pspEnabled: false  # Pod Security Policies can be enabled if needed
  clusterScoped: true
  serviceAccount:
    create: true
    name: ""
    automountServiceAccountToken: true